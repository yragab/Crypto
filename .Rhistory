class(c)
class(x)
x[1]
analysis_pair = "BCH/USD"
?gsub
x = gsub(" USD", "", str_extract(s, "[\\d]+\\s(USD$)"))
x = gsub(" USD", "", str_extract(s, "[\\d]+\\s(USD$)"))
x
x = as.numeric(gsub(" USD", "", str_extract(s, "[\\d]+\\s(USD$)")))
x
trans_set = raw_trans_set %>%
filter(Pair == analysis_pair) %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "[\\d]+\\s(USD$)")))) %>%
select(DateUTC, Amount, Symbol, Type, Rate, FeeAmount)
trans_set = raw_trans_set %>%
filter(Pair == analysis_pair) %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "[\\d]+\\s(USD$)")))) %>%
select(DateUTC, Amount, Symbol, Type, Rate, FeeAmount)
analysis_pair = "BCH/USD"
trans_set = raw_trans_set %>%
filter(Pair == analysis_pair) %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "[\\d]+\\s(USD$)")))) %>%
select(DateUTC, Amount, Symbol, Type, Rate, FeeAmount)
names(raw_trans_set)
trans_set = raw_trans_set %>%
filter(Pair == analysis_pair)
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD")
library(dplyr)
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD") %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "[\\d]+\\s(USD$)")))) %>%
select(DateUTC, Amount, Symbol, Type, Rate, FeeAmount)
View(trans_set)
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD") %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "[\\d]+\\s(USD$)")))) %>%
select(DateUTC, Amount, Symbol, Type, Rate, Comment, FeeAmount)
View(trans_set)
str_match_all("123.45 USD", "(\\d+\\.?\\d*)\\sUSD$")[[1]][1, 2]
str_match_all("123 USD", "(\\d+\\.?\\d*)\\sUSD$")[[1]][1, 2]
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD") %>%
mutate(Rate = as.numeric(str_match_all("123 USD", "(\\d+\\.?\\d*)\\sUSD$")[[1]][1, 2])) %>%
select(DateUTC, Amount, Symbol, Type, Rate, Comment, FeeAmount)
View(trans_set)
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD") %>%
mutate(Rate = as.numeric(str_match_all(Comment, "(\\d+\\.?\\d*)\\sUSD$")[[1]][1, 2])) %>%
select(DateUTC, Amount, Symbol, Type, Rate, Comment, FeeAmount)
View(trans_set)
str_extract("23.33 USD", "(\\d+\\.?\\d*)\\sUSD$")
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD") %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "(\\d+\\.?\\d*)+\\s(USD$)")))) %>%
select(DateUTC, Amount, Symbol, Type, Rate, Comment, FeeAmount)
View(trans_set)
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD") %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "(\\d+\\.?\\d*)+\\s(USD$)")))) %>%
mutate(CCR = ifelse(Type == "buy", Amount, -1 * Amount/Rate))
select(DateUTC, Amount, Symbol, Type, Rate, Comment, FeeAmount)
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD") %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "(\\d+\\.?\\d*)+\\s(USD$)")))) %>%
mutate(CCR = ifelse(Type == "buy", Amount, -1 * Amount/Rate)) %>%
select(DateUTC, Amount, Symbol, Type, Rate, Comment, FeeAmount)
View(trans_set)
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD") %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "(\\d+\\.?\\d*)+\\s(USD$)")))) %>%
mutate(CCR = ifelse(Type == "buy", Amount, -1 * Amount/Rate)) %>%
select(DateUTC, Amount, Symbol, Type, Rate, Comment, FeeAmount)
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD") %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "(\\d+\\.?\\d*)+\\s(USD$)")))) %>%
mutate(CCR = ifelse(Type == "buy", Amount, -1 * Amount/Rate)) %>%
select(DateUTC, CCR, Amount, Symbol, Type, Rate, Comment, FeeAmount)
View(trans_set)
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD") %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "(\\d+\\.?\\d*)+\\s(USD$)")))) %>%
mutate(CCR = ifelse(Type == "buy", Amount, -1 * Amount/Rate),
USD = ifelse(Type == "sell", -1 * Amount, Amount * Rate )) %>%
select(DateUTC, CCR, USD, Amount, Symbol, Type, Rate, Comment, FeeAmount)
View(trans_set)
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD") %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "(\\d+\\.?\\d*)+\\s(USD$)")))) %>%
mutate(CCR = ifelse(Type == "buy", Amount, -1 * Amount/Rate),
USD = ifelse(Type == "sell", Amount, -1 * Amount * Rate )) %>%
select(DateUTC, CCR, USD, Amount, Symbol, Type, Rate, Comment, FeeAmount)
View(trans_set)
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD") %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "(\\d+\\.?\\d*)+\\s(USD$)")))) %>%
mutate(CCR = ifelse(Type == "buy", Amount, -1 * Amount/Rate),
USD = ifelse(Type == "sell", Amount, -1 * Amount * Rate - FeeAmount)) %>%
select(DateUTC, CCR, USD, Amount, Symbol, Type, Rate, Comment, FeeAmount)
sum(trans_set$CCR)
sum(trans_set$USD)
names(raw_trans_set)
table(raw_trans_set$Type)
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD", type %in% c("buy", "sell")) %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "(\\d+\\.?\\d*)+\\s(USD$)")))) %>%
mutate(CCR = ifelse(Type == "buy", Amount, -1 * Amount/Rate),
USD = ifelse(Type == "sell", Amount, -1 * Amount * Rate - FeeAmount)) %>%
select(DateUTC, CCR, USD, Amount, Symbol, Type, Rate, Comment, FeeAmount)
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD", Type %in% c("buy", "sell")) %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "(\\d+\\.?\\d*)+\\s(USD$)")))) %>%
mutate(CCR = ifelse(Type == "buy", Amount, -1 * Amount/Rate),
USD = ifelse(Type == "sell", Amount, -1 * Amount * Rate - FeeAmount)) %>%
select(DateUTC, CCR, USD, Amount, Symbol, Type, Rate, Comment, FeeAmount)
sum(trans_set$CCR)
sum(trans_set$USD)
0.15 + 0.05 + 0.1 + 0.025 + 0.025
0.038 + 0.047 + 0.047 + 0.025 + 0.025 + 0.05 + 0.01 + 0.04 + 0.04 + 0.05 + 0.0086 + 0.015
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD", Type %in% c("buy", "sell")) %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "(\\d+\\.?\\d*)+\\s(USD$)")))) %>%
mutate(CCR = ifelse(Type == "buy", Amount, -1 * Amount/Rate),
USD = ifelse(Type == "sell", Amount, -1 * Amount * Rate - FeeAmount))
View(trans_set)
sum(trans_set$CCR)
View(raw_trans_set)
x = raw_trans_set %>% filter(Symbol == "BCH", Type == "buy")
nrow(x)
Sum(x$Amount)
sum(x$Amount)
y = raw_trans_set %>% filter(Symbol == "BCH", Type == "sell")
sum(y$Amount)
View(y)
y = raw_trans_set %>% filter(Symbol == "BCH", Type == "sell", Pair == "BCH/USD")
View(y)
y = raw_trans_set %>% filter(Symbol == "USD", Type == "sell", Pair == "BCH/USD")
View(y)
sum(y$Amount)
nrow(y)
sum(trans_set$USD)
sum(trans_set$CCR)
trans_set = raw_trans_set %>%
filter(Pair == "BCH/USD", Type %in% c("buy", "sell")) %>%
mutate(Rate = as.numeric(gsub(" USD", "", str_extract(Comment, "(\\d+\\.?\\d*)+\\s(USD$)")))) %>%
mutate(CCR = ifelse(Type == "buy", Amount, -1 * Amount/Rate),
USD = ifelse(Type == "sell", Amount, -1 * Amount * Rate - FeeAmount))
sum(trans_set$CCR)
sum(trans_set$USD)
library(jsonlite)
library(data.table)
response = fromJSON('https://www.cryptocompare.com/api/data/coinlist')
response = fromJSON('https://www.cryptocompare.com/api/data/coinlist')
response
df = data.table::rbindlist(response$Data, fill=TRUE)
df
View(df)
response
str(response)
summary(response)
response$Data
cryptos = as.data.frame(response$Data)
View(cryptos)
cryptos = rbindlist(response$Data, fill = TRUE)
View(cryptos)
response = fromJSON('https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=BTC,USD,EUR')
response
response = fromJSON('https://min-api.cryptocompare.com/data/pricemulti?fsyms=ETH,DASH&tsyms=BTC,USD,EUR')
response
response = fromJSON('https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH,DASH&tsyms=BTC,USD,EUR')
response
response = fromJSON('https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH,DASH&tsyms=BTC,USD')
response
response = fromJSON('https://min-api.cryptocompare.com/data/generateAvg?fsym=BTC&tsym=USD&markets=Coinbase,Bitfinex')
response
response = fromJSON('https://min-api.cryptocompare.com/data/generateAvg?fsym=BTC&tsym=USD&e=Coinbase,Bitfinex')
response
response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=BTC&tsym=USD&limit=60&aggregate=3&e=CCCAGG')
response
response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=ETH,ADA&tsym=USD&limit=15&aggregate=3&e=Binance')
response
response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=ETH,DASH&tsym=USD&limit=15&aggregate=3&e=Binance')
response
response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=ETH&tsym=USD&limit=15&aggregate=3&e=Binance')
response
response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=ETH&tsym=USDT&limit=15&aggregate=3&e=Binance')
response
response = fromJSON('https://min-api.cryptocompare.com/data/top/pairs?fsym=BTC&limit=20')
response
response = fromJSON('https://min-api.cryptocompare.com/data/top/pairs?tsym=BTC&limit=20')
response
response = fromJSON('https://min-api.cryptocompare.com/data/top/pairs?fsym=USD&limit=20')
response
response = fromJSON('https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=BTC,USD')
response
response = fromJSON('https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH,DASH&tsyms=BTC,USD')
response
str(response)
str(response)
response = fromJSON('https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=BTC,USD')
str(response)
response = fromJSON('https://min-api.cryptocompare.com/data/pricemulti?fsyms=ETH,DASH&tsyms=BTC,USD')
str(response)
response = fromJSON('https://min-api.cryptocompare.com/data/generateAvg?fsym=BTC&tsym=USD&e=Coinbase,Bitfinex')
str(response)
response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=ETH&tsym=USDT&limit=15&aggregate=3&e=Binance')
str(response)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Work/Side/Crypto/pull_crypto_data.R', echo=TRUE)
response = fromJSON('https://min-api.cryptocompare.com/data/price?fsym=NXT&tsyms=BTC,USD&e=Poloniex')
response = fromJSON('https://min-api.cryptocompare.com/data/pricemulti?fsyms=ETH,DASH&tsyms=BTC,USD')
response
response = fromJSON('https://min-api.cryptocompare.com/data/price?fsym=NXT&tsyms=BTC,USD&e=Poloniex')
response
response = fromJSON('https://min-api.cryptocompare.com/data/pricemulti?fsyms=ETH,DASH,NXT&tsyms=BTC,USD')
response
response = fromJSON('https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USDT,USD&e=Binance')
response
response = fromJSON('https://min-api.cryptocompare.com/data/price?fsym=LTC&tsyms=USDT&e=Binance')
response
response = fromJSON('https://min-api.cryptocompare.com/data/pricemulti?fsyms=XVG,ADA&tsyms=BTC,USD&e=Binance')
response
response = fromJSON('https://min-api.cryptocompare.com/data/pricemulti?fsyms=XVG,ADA&tsyms=BTC&e=Binance')
response
response = fromJSON('https://min-api.cryptocompare.com/data/price?fsym=LTC&tsyms=USDT&e=Binance')
response
response = fromJSON('https://min-api.cryptocompare.com/data/pricemulti?fsyms=XVG,ADA&tsyms=BTC&e=Binance')
response
response = fromJSON('https://min-api.cryptocompare.com/data/pricemultifull?fsyms=ETH,DASH&tsyms=BTC,USD')
response
response = fromJSON('https://min-api.cryptocompare.com/data/pricemultifull?fsyms=XVG,ADA&tsyms=BTC&e=Binance')
response
response = fromJSON('https://min-api.cryptocompare.com/data/generateAvg?fsym=BTC&tsym=USD&e=Coinbase,Bitfinex')
response
response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=ETH&tsym=USDT&limit=15&aggregate=3&e=Binance')
response
View(response$Data)
class(response$Data)
response = fromJSON('https://min-api.cryptocompare.com/data/top/pairs?fsym=BTC&limit=20')
response
response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=XVG&tsym=BTC&limit=60&aggregate=3&e=Binance')
response$Data
response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=XVG&tsym=BTC&limit=1000&aggregate=3&e=Binance')
vrg_data = response$Data
vrg_data
View(vrg_data)
names(vrg_data)
?diff
x = c(1,2,3,4,5)
diff(x)
diff(vrg_data$time)
diff(vrg_data$high)
diff(vrg_data$high)
response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=XVG&tsym=BTC&aggregate=3&e=Binance')
vrg_data = response$Data
nrow(vrg_data)
667/60
diff(vrg_data$high)
?diff
diff(1:10, 1)
diff(1:10, 2)
diff(vrg_data$high, 5)
vrg_data$high[seq(1,nrow(vrg_data),5)]
n = diff(vrg_data$high, 5)
nrow(n)
length(n)
length(vrg_data$high)
n = diff(vrg_data$high, 5)
d = vrg_data$high[1:length(n)]
length(n)
length(d)
change = n / d
change
n = diff(vrg_data$high, 5)
d = vrg_data$high[1:length(n)]
c = 100 * n / d
c
c = round(100 * n / d, 2)
c
plot(vrg_data$high)
plot(vrg_data$high)
plot(vrg_data$time, vrg_data$high)
xvg_response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=XVG&tsym=BTC&aggregate=3&e=Binance')
ada_response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=ADA&tsym=BTC&aggregate=3&e=Binance')
ada_response = ada_response$Data
ada_response = ada_response$Data
plot(ada_response$time, ada_response$high)
plot(ada_response$time, ada_response$high)
ada_response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=ADA&tsym=BTC&aggregate=3&e=Binance')
ada_response = ada_response$Data
ada_response
plot(ada_response$time, ada_response$high)
cbind(vrg_data, c)
c = rep(0, nrow(vrg_data) - length(c))
c
vrg_data = xvg_response$Data
nrow(vrg_data)
View(vrg_data)
plot(vrg_data$time, vrg_data$high)
n = diff(vrg_data$high, 5)
d = vrg_data$high[1:length(n)]
c = round(100 * n / d, 2)
c = c(rep(0, nrow(vrg_data) - length(c)), c)
vrg_data = cbind(vrg_data, c)
View(vrg_data)
f = vrg_data$high[1:length(n)]
d_5 = diff(vrg_data$high, 5)
f = vrg_data$high[1:length(n)]
d_5 = diff(vrg_data$high, 5)
c_5 = round(100 * d_5 / f, 2)
c_5 = c(rep(0, nrow(vrg_data) - length(c_5)), c_5)
c_5
vrg_data = cbind(vrg_data, c_5)
View(vrg_data)
d_15 = diff(vrg_data$high, 15)
f = vrg_data$high[1:length(d_15)]
d_5 = diff(vrg_data$high, 5)
f_5 = vrg_data$high[1:length(d_5)]
c_5 = round(100 * d_5 / f_5, 2)
c_5 = c(rep(0, nrow(vrg_data) - length(c_5)), c_5)
d_15 = diff(vrg_data$high, 15)
f_15 = vrg_data$high[1:length(d_15)]
c_15 = round(100 * d_15 / f_15, 2)
c_15 = c(rep(0, nrow(vrg_data) - length(c_15)), c_15)
vrg_data = cbind(vrg_data, c_5, c_15)
View(vrg_data)
plotHighs(vrg_data)
ada_data = ada_response$Data
ada_data = ada_response$Data
plotHighs(ada_data)
plotHighs(ada_data)
plotHighs <- function(crypto_data) {
plot(crypto_data$time, crypto_data$high)
}
plotHighs(vrg_data)
plotHighs(ada_data)
plotHighs(vrg_data)
plotHighs(ada_data)
ada_data = ada_response$Data
ada_data
ada_response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=ADA&tsym=BTC&aggregate=3&e=Binance')
ada_data = ada_response$Data
plotHighs(ada_data)
computeDiffHighs <- function(crypto_data, diff_interval_min) {
d = diff(crypto_data$high, diff_interval_min)
f = vrg_data$high[1:length(d)]
c = round(100 * d / f, 2)
c = c(rep(0, nrow(crypto_data) - length(c)), c)
return(c)
}
c_5 = computeDiffHighs(vrg_data, 5)
c_15 = computeDiffHighs(vrg_data, 15)
vrg_data = cbind(vrg_data, c_5, c_15)
View(vrg_data)
xvg_response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=XVG&tsym=BTC&aggregate=3&e=Binance')
vrg_data = xvg_response$Data
c_5 = computeDiffHighs(vrg_data, 5)
c_15 = computeDiffHighs(vrg_data, 15)
c_30 = computeDiffHighs(vrg_data, 30)
vrg_data = cbind(vrg_data, c_5, c_15, c_30)
View(vrg_data)
c_60 = computeDiffHighs(vrg_data, 60)
vrg_data = cbind(vrg_data, c_5, c_15, c_30, c_60)
View(vrg_data)
bcc_response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=BCCOIN&tsym=BTC&aggregate=3')
bcc_response
bcc_response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=BCCOIN&tsym=USD&aggregate=3')
bcc_response
bcc_response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=BCCOIN&tsym=USD&aggregate=3')
bcc_data = bcc_response$Data
bcc_data = bcc_response$Data
plotHighs(bcc_data)
processCryptoData <- function(crypto_data) {
plotHighs(crypto_data)
c_5 = computeDiffHighs(crypto_data, 5)
c_15 = computeDiffHighs(crypto_data, 15)
c_30 = computeDiffHighs(crypto_data, 30)
c_60 = computeDiffHighs(crypto_data, 60)
crypto_data = cbind(crypto_data, c_5, c_15, c_30, c_60)
View(crypto_data)
}
vrg_data = processCryptoData(xvg_response$Data)
bcc_data = processCryptoData(bcc_response$Data)
bcc_response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=BCCOIN&tsym=USD&aggregate=3')
bcc_response$Data
bcc_data = processCryptoData(bcc_response$Data)
# Basic data investigation
plotHighs <- function(crypto_data) {
plot(crypto_data$time, crypto_data$high)
}
computeDiffHighs <- function(crypto_data, diff_interval_min) {
d = diff(crypto_data$high, diff_interval_min)
f = crypto_data$high[1:length(d)]
c = round(100 * d / f, 2)
c = c(rep(0, nrow(crypto_data) - length(c)), c)
return(c)
}
processCryptoData <- function(crypto_data) {
plotHighs(crypto_data)
c_5 = computeDiffHighs(crypto_data, 5)
c_15 = computeDiffHighs(crypto_data, 15)
c_30 = computeDiffHighs(crypto_data, 30)
c_60 = computeDiffHighs(crypto_data, 60)
crypto_data = cbind(crypto_data, c_5, c_15, c_30, c_60)
View(crypto_data)
}
vrg_data = processCryptoData(xvg_response$Data)
ada_data = processCryptoData(ada_response$Data)
bcc_data = processCryptoData(bcc_response$Data)
bcc_response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=BCCOIN&tsym=USD&aggregate=3')
bcc_data = processCryptoData(bcc_response$Data)
diff(x)
x = c(1:100)
diff(x)
diff(diff(x))
processCryptoData <- function(crypto_data) {
plotHighs(crypto_data)
c_5 = computeDiffHighs(crypto_data, 5)
c_15 = computeDiffHighs(crypto_data, 15)
c_30 = computeDiffHighs(crypto_data, 30)
c_60 = computeDiffHighs(crypto_data, 60)
crypto_data = cbind(crypto_data, c_5, c_15, c_30, c_60)
View(crypto_data)
return(crypto_data)
}
bcc_response = fromJSON('https://min-api.cryptocompare.com/data/histominute?fsym=BCCOIN&tsym=USD&aggregate=3')
bcc_data = processCryptoData(bcc_response$Data)
diff(diff(bcc_data$high, 5), 5)
z <- low[,-c(1,1)]
View(df)
?kmeans
data_set = cbind(x = (rnorm(100, 5, 2) + rnorm(100, 10, 1)),
y = (rnorm(100, 3, 2) + rnorm(100, 12, 3)))
data_set
plot(x, y)
with(dataset, plot(x, y))
with(data_set, plot(x, y))
plot(data_set$x, data_set$y)
class(data_set)
data_set = data.frame(
x = (rnorm(100, 5, 2) + rnorm(100, 10, 1)),
y = (rnorm(100, 3, 2) + rnorm(100, 12, 3)))
data_set
with(data_set, plot(x, y))
data_set = data.frame(
x = (rnorm(1000, 5, 2) + rnorm(1000, 10, 1)),
y = (rnorm(1000, 3, 2) + rnorm(1000, 12, 3)))
with(data_set, plot(x, y))
# Create a 2-d dataset with two clusters
data_set = data.frame(
x = (rnorm(1000, 5, 0.5) + rnorm(1000, 10, 1)),
y = (rnorm(1000, 3, 0.5) + rnorm(1000, 12, 3)))
with(data_set, plot(x, y))
# Create a 2-d dataset with two clusters
data_set = data.frame(
x = (rnorm(1000, 5, 0.5) + rnorm(1000, 10, 0.1)),
y = (rnorm(1000, 3, 0.5) + rnorm(1000, 12, 0.2)))
with(data_set, plot(x, y))
with(data_set, plot(x, y))
hist(rnorm(1000, 5, 0.5))
# Create a 2-d dataset with two clusters
data_set = data.frame(
x = c(rnorm(1000, 5, 0.5), rnorm(1000, 10, 0.1)),
y = c(rnorm(1000, 3, 0.5), rnorm(1000, 12, 0.2)))
with(data_set, plot(x, y))
# Create a 2-d dataset with two clusters
data_set = data.frame(
x = c(rnorm(1000, 5, 1), rnorm(1000, 10, 0.1)),
y = c(rnorm(1000, 3, 1), rnorm(1000, 12, 0.2)))
with(data_set, plot(x, y))
# Create a 2-d dataset with two clusters
data_set = data.frame(
x = c(rnorm(1000, 5, 1), rnorm(1000, 10, 1.5)),
y = c(rnorm(1000, 3, 1), rnorm(1000, 12, 3)))
with(data_set, plot(x, y))
# Create a 2-d dataset with two clusters
data_set = data.frame(
x = c(rnorm(1000, 5, 1), rnorm(1000, 10, 3)),
y = c(rnorm(1000, 3, 1), rnorm(1000, 12, 1.5)))
with(data_set, plot(x, y))
clusters = kmeans(data_set, 2)
clusters
clustering = kmeans(data_set, 2)
with(data_set, plot(x, y, col = clustering$cluster))
clustered_dataset = cbind(dataset, clustering$cluster)
# Create a 2-d dataset with two clusters
dataset = data.frame(
x = c(rnorm(1000, 5, 1), rnorm(1000, 10, 3)),
y = c(rnorm(1000, 3, 1), rnorm(1000, 12, 1.5)))
# Visualize it
with(dataset, plot(x, y))
# k-means Clustering
clustering = kmeans(data_set, 2)
# Visulize clusters
with(dataset, plot(x, y, col = clustering$cluster))
# Add the cluster label to the dataset
clustered_dataset = cbind(dataset, clustering$cluster)
View(clustered_dataset)
write.csv(clustered_dataset)
write.csv(clustered_dataset, "clustered_dataset.csv")
name(clustered_dataset)
eval(as.name(clustered_dataset))
deparse(substitute(x))
deparse(substitute(clustered_dataset))
file_name = paste(deparse(substitute(clustered_dataset)), ".csv")
file_name = paste(deparse(substitute(clustered_dataset)), ".csv", "")
file_name
file_name = paste(deparse(substitute(clustered_dataset)), ".csv", sep = "")
file_name
file_name = paste(deparse(substitute(clustered_dataset)), ".csv", sep = "")
write.csv(clustered_dataset, file_name)
file_name = "clustered_dataset.csv"
write.csv(clustered_dataset, file_name)
