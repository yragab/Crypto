{
    "collab_server" : "",
    "contents" : "\nlibrary(jsonlite)\nlibrary(TTR)\nlibrary(dplyr)\n\n\n# CONFIG\nTIME_CONSTANTS = c(7, 15, 30, 60)\n\n# Generate URL\ngetHistoMinuteURL <- function(crypto) {\n  URL = \n    sprintf(\"https://min-api.cryptocompare.com/data/histominute?fsym=%s&tsym=BTC&aggregate=3&e=Binance\",\n            crypto)\n  return(URL)\n}\n\n# Compute the change over a time constant  \ncomputeChange <- function(time_series, time_constant) {\n  d = diff(time_series, time_constant)\n  f = time_series[1:length(d)]\n  c = round(100 * d / f, 2)\n  c = c(rep(0, length(time_series) - length(c)), c)\n  return(c)\n}\n\n# Compute change over a time constant features \ncomputeChangeFeatures <- function(time_series, feature_name) {\n  # Compute change features\n  change_features_temp = lapply(TIME_CONSTANTS, function(x) {\n    computeChange(time_series, x)\n  })\n  # Rename features\n  change_features = as.data.frame(\n    change_features_temp,\n    col.names = paste(feature_name, \"_\", TIME_CONSTANTS, \"m\", sep = \"\"))\n  # Return\n  return(change_features)\n}\n\n# Compute EMA features\ncomputeEMAFeatures <- function(time_series, feature_name) {\n  # Compute change features\n  ema_features_temp = lapply(TIME_CONSTANTS, function(x) {\n    EMA(time_series, x, wilder = FALSE, ratio = NULL)\n  })\n  # Rename features\n  ema_features = as.data.frame(\n    ema_features_temp,\n    col.names = paste(feature_name, \"_\", TIME_CONSTANTS, \"m\", sep = \"\"))\n  # Return\n  return(ema_features)\n}\n\n# Compute change over a time constant features \ncomputeAllChangeFeatures <- function(crypto_data) {\n  # Compute change of highs over preset time constants\n  high_change_features = computeChangeFeatures(crypto_data$high, \"high_change\")\n  # Compute change of lows over preset time constants\n  low_change_features = computeChangeFeatures(crypto_data$low, \"low_change\")\n  # Merge change features\n  change_features = cbind(high_change_features, low_change_features)\n  return(change_features)\n}\n\n# Compute all EMA features\ncomputeAllEMAFeatures <- function(crypto_data) {\n  # Compute change of highs over preset time constants\n  high_EMA_features = computeEMAFeatures(crypto_data$high, \"high_ema\")\n  # Compute change of lows over preset time constants\n  low_EMA_features = computeEMAFeatures(crypto_data$low, \"low_ema\")\n  # Compute change of highs over preset time constants\n  close_EMA_features = computeEMAFeatures(crypto_data$close, \"close_ema\")\n  # Merge change features\n  ema_features = cbind(high_EMA_features, low_EMA_features, close_EMA_features)\n  return(ema_features)\n}\n\ncomputeAllEMAChangeFeatures <- function(crypto_data) {\n  # Compute change for EMA features\n  ema_change_features = mapply(\n    function(x, y) { \n      computeChange(x, y)\n    }, \n    as.list(crypto_data), TIME_CONSTANTS, SIMPLIFY = FALSE)\n  # Name features\n  names(ema_change_features) =\n    paste(names(ema_change_features), \"_change_\", TIME_CONSTANTS, \"m\", sep = \"\")\n  # Return\n  return(ema_change_features)\n}\n\n# Compute Change rates ad different intervals\ncomputeFeatures <- function(crypto_data) {\n  change_features = computeAllChangeFeatures(crypto_data)\n  ema_features = computeAllEMAFeatures(crypto_data)\n  ema_change_features = computeAllEMAChangeFeatures(ema_features)\n  crypto_data = cbind(crypto_data, change_features, ema_features, ema_change_features)\n  return(crypto_data)\n}\n\n# A rule that identifies buying opportunities \nopportunityRuleA <- function(augmented_crypto_data) {\n  augmented_crypto_data = augmented_crypto_data %>%\n    mutate(opportunityRuleA = \n             (high_change_7m > 0 &\n                high_change_15m > 1 & low_change_15m > 1 &\n                high_change_30m > 1 & low_change_30m > 1 & \n                high_ema_15m > high_ema_30m &\n                high_ema_15m_change_15m > 1))\n  return(augmented_crypto_data)\n}\n\n# Run all opportunity identification rules\nidentifyBuyOpportunities <- function(augmented_crypto_data) {\n  augmented_crypto_data = augmented_crypto_data %>%\n    opportunityRuleA()\n  return(augmented_crypto_data)\n}\n\n# Plot the high of every interval \nplotPriceAction <- function(crypto_data, title) {\n  plot(crypto_data$time, crypto_data$high, type = \"l\", main = title)\n  lines(crypto_data$time, crypto_data$close_ema_7m, type = \"l\", col = \"red\")\n  lines(crypto_data$time, crypto_data$close_ema_15m, type = \"l\", col = \"orange\")\n  lines(crypto_data$time, crypto_data$close_ema_30m, col = \"green\")\n  lines(crypto_data$time, crypto_data$opportunityRuleA, col = \"blue\")\n}\n\n\n# Verge\nxvg_response = fromJSON(getHistoMinuteURL(\"XVG\"))\nxvg_data = xvg_response$Data\nxvg_data_augmented = computeFeatures(xvg_data)\nxvg_data_augmented = identifyBuyOpportunities(xvg_data_augmented)\nplotPriceAction(xvg_data_augmented, \"XVG / ETH\")\n\n# Cardano\nada_response = fromJSON(getHistoMinuteURL(\"ADA\"))\nada_data = ada_response$Data\nada_data_augmented = computeFeatures(ada_data)\nada_data_augmented = identifyBuyOpportunities(ada_data_augmented)\nplotPriceAction(ada_data_augmented, \"ADA / ETH\")\n\n# NULS\nnuls_response = fromJSON(getHistoMinuteURL(\"NULS\"))\nnuls_data = nuls_response$Data\nnuls_data_augmented = computeFeatures(nuls_data)\nnuls_data_augmented = identifyBuyOpportunities(nuls_data_augmented)\nplotPriceAction(nuls_data_augmented, \"NULS / ETH\")\n\n\n\n\n\n\n\n\n",
    "created" : 1515083463266.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4146712593",
    "id" : "25F26AEE",
    "lastKnownWriteTime" : 1515265344,
    "last_content_update" : 1515265344263,
    "path" : "~/Library/Mobile Documents/com~apple~CloudDocs/Work/Side/Crypto/crypto_processor_v1.R",
    "project_path" : "crypto_processor_v1.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}